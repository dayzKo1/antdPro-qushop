image: registry.cn-hangzhou.aliyuncs.com/phenye/workspace:latest

variables:
   IMAGE : registry.internal.codefriend.top/qushop-136/qushop
   ISSUER: letsencrypt-develop
   BASE_APP_HOST: frp2.codefriend.top
   BASE_APP_INNER_HOST: internal.codefriend.top

before_script:
  - IMAGE_TAG=${IMAGE}:${CI_COMMIT_SHORT_SHA}

stages:
    - build
    - test
    - dockerize
    - deploy
    - verify

build: 
  stage: build
  cache:
    key: 
      files:
        - package.json
        - yarn.lock
    paths:
      - public
      - node_modules
  script:
      # - export AWS_ACCESS_KEY_ID=$AWS_ACCESS_ID
      # - export AWS_SECRET_ACCESS_KEY=$AWS_ACCESS_SECRET
      - yarn config set registry "https://registry.npm.taobao.org"
      - if [ ! -x "node_modules" ];then
        echo "node_modules not exist";
        yarn install --ignore-engines;
        else 
        echo "node_modules exist";  
        fi  
      - npm run build
  artifacts:
    expire_in: 1 day
    paths:
      - dist
      # - node_modules

codestyle:
  stage: test
  cache:
    key: 
      files:
        - package.json
        - yarn.lock
     # ${CI_COMMIT_REF_SLUG}-npm2
    paths:
      - dist
      - node_modules
    policy: pull
  script:
    - npm run prettier
    - npm run lint

build-image:
  stage: dockerize
  cache:
    key: 
      files:
        - package.json
        - yarn.lock
     # ${CI_COMMIT_REF_SLUG}-npm2
    paths:
      - dist
      # - frontend/node_modules
    policy: pull
  script:
    - export $HARBOR_REGISTRY_PASSWORD
    - chmod +x scripts/build.sh 
    - scripts/build.sh $CI_COMMIT_SHORT_SHA
    - chmod +x scripts/push.sh 
    - scripts/push.sh $CI_COMMIT_SHORT_SHA
  only:
    - master
    - develop
    - tags

deploy-dev:
  image: bitnami/kubectl
  stage: deploy
  variables:
    APP_ENV_HOST: dev-${CI_PROJECT_NAME}-${CI_PROJECT_NAMESPACE}.${BASE_APP_HOST}
    APP_ENV_INNER_HOST: dev-${CI_PROJECT_NAME}-${CI_PROJECT_NAMESPACE}.${BASE_APP_INNER_HOST}
    KUBE_NAMESPACE: $CI_PROJECT_NAME-$CI_PROJECT_ID-$CI_ENVIRONMENT_NAME
  script:
    - echo "Deploy to dev server"
    - echo $CI_ENVIRONMENT_NAME
    - echo $CI_ENVIRONMENT_SLUGA
    - echo $CI_PROJECT_PATH_SLUG
    - echo $KUBE_NAMESPACE 
    - echo $IMAGE_TAG
    - echo $APP_ENV_HOST
    - echo $APP_ENV_INNER_HOST
    - echo $ISSUER    
    - kubectl delete secret myregistrykey || echo 'delete secret myregistrykey'

    - kubectl create secret docker-registry myregistrykey --docker-server=registry.internal.codefriend.top --docker-username=yanghui --docker-password=${HARBOR_REGISTRY_PASSWORD}
    
    - cat deployment.yaml | 
      sed 's/\$ISSUER'"/$ISSUER/g" |
      sed 's/\$APP_ENV_HOST'"/$APP_ENV_HOST/g" |  
      sed 's/\$APP_ENV_INNER_HOST'"/$APP_ENV_INNER_HOST/g" |  
      sed 's/\$CI_ENVIRONMENT_SLUG'"/$CI_ENVIRONMENT_SLUG/g" | 
      sed 's/\$CI_PROJECT_PATH_SLUG'"/$CI_PROJECT_PATH_SLUG/g" |
      sed 's?\$IMAGE_TAG'"?$IMAGE_TAG?g" |
      kubectl apply -n=$KUBE_NAMESPACE -f -
  rules:
    - if: '$CI_COMMIT_TAG'
      when: always
    - if: '$CI_COMMIT_BRANCH == "master"'
      when: always
    - if: '$CI_COMMIT_BRANCH == "develop"'
      when: always
  environment:
    name: dev
    url: http://dev-${CI_PROJECT_NAME}-${CI_PROJECT_NAMESPACE}.${BASE_APP_INNER_HOST}

deploy-staging:
  image: bitnami/kubectl
  stage: deploy
  variables:
    APP_ENV_HOST: staging-${CI_PROJECT_NAME}-${CI_PROJECT_NAMESPACE}.${BASE_APP_HOST}
    APP_ENV_INNER_HOST: staging-${CI_PROJECT_NAME}-${CI_PROJECT_NAMESPACE}.${BASE_APP_INNER_HOST}
    KUBE_NAMESPACE: $CI_PROJECT_NAME-$CI_PROJECT_ID-$CI_ENVIRONMENT_NAME
  script:
    - echo "Deploy to staging server"
    - echo $CI_ENVIRONMENT_NAME
    - echo $CI_ENVIRONMENT_SLUGA
    - echo $CI_PROJECT_PATH_SLUG
    - echo $KUBE_NAMESPACE 
    - echo $IMAGE_TAG
    - echo $APP_ENV_HOST
    - echo $APP_ENV_INNER_HOST
    - echo $ISSUER    
    - kubectl delete secret myregistrykey || echo 'delete secret myregistrykey'

    - kubectl create secret docker-registry myregistrykey --docker-server=registry.internal.codefriend.top --docker-username=yanghui --docker-password=${HARBOR_REGISTRY_PASSWORD}
    
    - cat deployment.yaml | 
      sed 's/\$ISSUER'"/$ISSUER/g" |
      sed 's/\$APP_ENV_HOST'"/$APP_ENV_HOST/g" |  
      sed 's/\$APP_ENV_INNER_HOST'"/$APP_ENV_INNER_HOST/g" |  
      sed 's/\$CI_ENVIRONMENT_SLUG'"/$CI_ENVIRONMENT_SLUG/g" | 
      sed 's/\$CI_PROJECT_PATH_SLUG'"/$CI_PROJECT_PATH_SLUG/g" |
      sed 's?\$IMAGE_TAG'"?$IMAGE_TAG?g" |
      kubectl apply -n=$KUBE_NAMESPACE -f -
  rules:
    - if: '$CI_COMMIT_TAG'
      when: always
    - if: '$CI_COMMIT_BRANCH == "master"'
      when: manual
  environment:
    name: staging
    url: http://staging-${CI_PROJECT_NAME}-${CI_PROJECT_NAMESPACE}.${BASE_APP_INNER_HOST}

deploy-prod:
  image: bitnami/kubectl
  stage: deploy
  variables:
    APP_ENV_HOST: prod-${CI_PROJECT_NAME}-${CI_PROJECT_NAMESPACE}.${BASE_APP_HOST}
    APP_ENV_INNER_HOST: prod-${CI_PROJECT_NAME}-${CI_PROJECT_NAMESPACE}.${BASE_APP_INNER_HOST}
    KUBE_NAMESPACE: $CI_PROJECT_NAME-$CI_PROJECT_ID-$CI_ENVIRONMENT_NAME
  script:
    - echo "Deploy to prod server"
    - echo $CI_ENVIRONMENT_NAME
    - echo $CI_ENVIRONMENT_SLUGA
    - echo $CI_PROJECT_PATH_SLUG
    - echo $KUBE_NAMESPACE 
    - echo $IMAGE_TAG
    - echo $APP_ENV_HOST
    - echo $APP_ENV_INNER_HOST
    - echo $ISSUER    
    - kubectl delete secret myregistrykey || echo 'delete secret myregistrykey'

    - kubectl create secret docker-registry myregistrykey --docker-server=registry.internal.codefriend.top --docker-username=yanghui --docker-password=${HARBOR_REGISTRY_PASSWORD}
    
    - cat deployment.yaml | 
      sed 's/\$ISSUER'"/$ISSUER/g" |
      sed 's/\$APP_ENV_HOST'"/$APP_ENV_HOST/g" |  
      sed 's/\$APP_ENV_INNER_HOST'"/$APP_ENV_INNER_HOST/g" |  
      sed 's/\$CI_ENVIRONMENT_SLUG'"/$CI_ENVIRONMENT_SLUG/g" | 
      sed 's/\$CI_PROJECT_PATH_SLUG'"/$CI_PROJECT_PATH_SLUG/g" |
      sed 's?\$IMAGE_TAG'"?$IMAGE_TAG?g" |
      kubectl apply -n=$KUBE_NAMESPACE -f -
  rules:
    - if: '$CI_COMMIT_TAG'
      when: manual
    - if: '$CI_COMMIT_BRANCH == "master"'
      when: manual
  environment:
    name: prod
    url: http://x136.qushop.${BASE_APP_INNER_HOST}